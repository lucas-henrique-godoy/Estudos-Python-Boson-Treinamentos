Cuso de Python - BÓSON TREINAMNETOS.

- Comentários: #. Para comentar várias linhas selecione o código que deseja comenta e aperte CTR + K + C. E para descomentar aperte CTR + K + U.

- Variaveis: Local reservado na memória do computador que é usado para armazenar de forma  temporária os dados  que o programa utiliza.
EX: nome_usuario = 'Lucas'
print(nome_usuario).

- Declarando Variáveis
Atribuição Simples:
Para declarar uma variável em Python, você simplesmente atribui um valor a um nome de variável usando o operador de atribuição (=). Por exemplo:

idade = 30
nome = "João"
salario = 2500.50
Convenções para Nomes de Variáveis:

Case-sensitive: Python é sensível a maiúsculas e minúsculas, então nome e Nome são diferentes variáveis.
Caracteres permitidos: Nomes de variáveis podem conter letras, números e underscores (_), mas devem começar com uma letra ou underscore. Exemplos válidos: nome, idade, _salario, idade2.
Convenção de nomes: Use nomes descritivos que indiquem o propósito da variável. Por convenção:
Use letras minúsculas para nomes de variáveis normais (idade, nome_completo).
Use underscores para separar palavras em nomes de variáveis compostas (nome_completo, salario_mensal).
Evite nomes de variáveis que são palavras reservadas do Python, como print, for, if, etc.
Para constantes, use letras maiúsculas (TAXA_JUROS).
Tipos de Dados
Python é uma linguagem de tipagem dinâmica, o que significa que o tipo de uma variável é inferido pelo interpretador com base no valor atribuído a ela. Por exemplo:

mensagem = "Olá, mundo!"  # mensagem é uma variável do tipo string
numero = 42                # numero é uma variável do tipo int
preco = 199.99             # preco é uma variável do tipo float
Exemplo de Uso

# Declaração de variáveis
nome = "Maria"
idade = 25
altura = 1.75
tem_filhos = False

# Impressão dos valores das variáveis
print("Nome:", nome)
print("Idade:", idade)
print("Altura:", altura)
print("Tem filhos?", tem_filhos)
Observações Finais
Em Python, a flexibilidade na declaração de variáveis e a falta de necessidade de especificar tipos de dados tornam o código mais limpo e legível. No entanto, é importante seguir as convenções para facilitar a compreensão do código por outras pessoas (ou por você mesmo no futuro) e para manter consistência no estilo de programação.

- ATRIBUIÇÃO ENCADEADA OU ATRIBUIÇÃO MÚLTIPLA: A atribuição encadeada, também conhecida como atribuição múltipla, é um recurso em Python que permite atribuir o mesmo valor a múltiplas variáveis em uma única linha de código. Isso é feito de forma compacta e eficiente, economizando espaço e tornando o código mais legível.

Sintaxe
A sintaxe básica da atribuição encadeada é:

var1 = var2 = var3 = valor
Nesta estrutura:

valor é o valor que será atribuído às variáveis var1, var2 e var3.
A atribuição ocorre da direita para a esquerda, ou seja, valor é atribuído primeiro à variável mais à direita (var3), depois propagado para as variáveis subsequentes na ordem.

Funcionamento
Ao executar uma expressão como var1 = var2 = var3 = valor:

Atribuição do Valor: O valor à direita do sinal de atribuição (=) é avaliado primeiro.

Propagação do Valor: O valor é então atribuído às variáveis da direita para a esquerda, uma por uma.

Por exemplo:
x = y = z = 10
Neste caso:

z = 10
y = z (então y também se torna 10)
x = y (então x também se torna 10)

Vantagens
Concisão: Reduz a quantidade de código necessário para inicializar várias variáveis com o mesmo valor.
Legibilidade: Torna o código mais claro e fácil de entender ao agrupar operações relacionadas em uma única linha.
Exemplos
Atribuição de valores diferentes:

a, b, c = 1, 2, 3
print(a, b, c)  # Saída: 1 2 3
Atribuição com um valor único para múltiplas variáveis:

x = y = z = 0
print(x, y, z)  # Saída: 0 0 0
Considerações
É importante notar que a atribuição encadeada funciona bem quando todas as variáveis envolvidas precisam iniciar com o mesmo valor. Se você precisa atribuir valores diferentes, é melhor usar a forma explícita, como mostrado no primeiro exemplo.

A ordem da atribuição é determinada da direita para a esquerda, o que significa que o valor é propagado sequencialmente para cada variável na expressão.

A atribuição encadeada é uma característica poderosa e útil em Python, permitindo escrever código mais conciso e eficiente.
____________________________________________________________________________________________________________________________________________________________________
- OPERADORES ARITMÉTICOS: Os operadores aritméticos em Python são utilizados para realizar operações matemáticas básicas entre variáveis ou valores numéricos. Vamos explorar os principais operadores aritméticos em Python:

Adição (+): Utilizado para adicionar dois valores.

resultado = 5 + 3
print(resultado)  # Saída: 8
Subtração (-): Utilizado para subtrair um valor de outro.

resultado = 5 - 3
print(resultado)  # Saída: 2
Multiplicação (*): Utilizado para multiplicar dois valores.

resultado = 5 * 3
print(resultado)  # Saída: 15
Divisão (/): Utilizado para dividir um valor pelo outro. O resultado será sempre um número de ponto flutuante (float).

resultado = 5 / 3
print(resultado)  # Saída: 1.6666666666666667
Divisão inteira (//): Utilizado para dividir um valor pelo outro e retornar apenas a parte inteira do resultado.

resultado = 5 // 3
print(resultado)  # Saída: 1
Resto da divisão (%): Utilizado para obter o resto da divisão entre dois valores.

resultado = 5 % 3
print(resultado)  # Saída: 2
Exponenciação (**): Utilizado para calcular a potência de um número.

resultado = 2 ** 3
print(resultado)  # Saída: 8
Além desses operadores básicos, Python também suporta o uso de parênteses () para alterar a precedência das operações, da mesma forma como na matemática. Por exemplo:

resultado = (5 + 3) * 2
print(resultado)  # Saída: 16
É importante lembrar que em expressões matemáticas, Python segue as regras de precedência padrão (PEMDAS/BODMAS):

Parênteses
Exponenciação
Multiplicação e Divisão (da esquerda para a direita)
Adição e Subtração (da esquerda para a direita)
Se precisar de mais algum esclarecimento ou exemplo específico, estou à disposição!

- ORDEM DE precedência DOS OPERADORES ARITMÉTICOS: 
- Parênteses
- Potenciação
- Multiplicação/Divisão
- Soma/Subtração
- Esquerda para a Direita.
_______________________________________________________________________________________________________________________________________________________________________
- OPERADORES DE COMPARAÇÃO: Em Python, os operadores de comparação são utilizados para comparar dois valores e retornar um resultado booleano (Verdadeiro ou Falso) com base na condição estabelecida. Aqui estão os principais operadores de comparação em Python:

== (igual a): Verifica se dois valores são iguais.
Exemplo: a == b retorna Verdadeiro se a for igual a b, caso contrário retorna Falso.

!= (diferente de): Verifica se dois valores são diferentes.
Exemplo: a != b retorna Verdadeiro se a for diferente de b, caso contrário retorna Falso.
> (maior que):

Verifica se o valor da esquerda é maior que o valor da direita.
Exemplo: a > b retorna Verdadeiro se a for maior que b, caso contrário retorna Falso.

< (menor que): Verifica se o valor da esquerda é menor que o valor da direita.
Exemplo: a < b retorna Verdadeiro se a for menor que b, caso contrário retorna Falso.

>= (maior ou igual a): Verifica se o valor da esquerda é maior ou igual ao valor da direita.
Exemplo: a >= b retorna Verdadeiro se a for maior ou igual a b, caso contrário retorna Falso.

<= (menor ou igual a): Verifica se o valor da esquerda é menor ou igual ao valor da direita.
Exemplo: a <= b retorna Verdadeiro se a for menor ou igual a b, caso contrário retorna Falso.
Os operadores de comparação são frequentemente utilizados em estruturas condicionais (como if, elif, else) para tomar decisões com base nas relações entre os valores das variáveis. É importante lembrar que os valores comparados não precisam ser apenas números; eles podem ser strings, listas, ou qualquer tipo de dado que possa ser comparado de acordo com as regras de comparação em Python.
_______________________________________________________________________________________________________________________________________________________________________
- OPERADORES LÓGICOS: Em Python, os operadores lógicos são usados para realizar operações lógicas entre valores booleanos (Verdadeiro ou Falso). Eles são frequentemente utilizados em expressões condicionais para combinar múltiplas condições ou inverter o valor de uma condição. 

Aqui estão os principais operadores lógicos em Python:

- AND: O operador and retorna Verdadeiro se ambos os operandos forem verdadeiros.
Exemplo: a and b retorna Verdadeiro se a for verdadeiro e b for verdadeiro.

- OR:O operador or retorna Verdadeiro se pelo menos um dos operandos for verdadeiro.
Exemplo: a or b retorna Verdadeiro se a for verdadeiro ou b for verdadeiro.

- NOT: O operador not é usado para inverter o valor de um operando booleano.
Exemplo: not a retorna Verdadeiro se a for falso, e retorna Falso se a for verdadeiro.
Esses operadores são frequentemente usados em estruturas condicionais (if, elif, else) para tomar decisões com base em múltiplas condições ou para negar uma condição. Aqui estão alguns exemplos de como esses operadores podem ser utilizados:

# Exemplo de uso do operador and
a = 5
b = 10
if a > 0 and b > 0:
    print("Ambos a e b são maiores que zero")

# Exemplo de uso do operador or
c = 15
d = 20
if c > 10 or d > 10:
    print("Pelo menos um dos valores c ou d é maior que 10")

# Exemplo de uso do operador not
e = True
if not e:
    print("e é falso")
else:
    print("e é verdadeiro")
Neste exemplo:

No primeiro bloco if, a condição a > 0 and b > 0 só será verdadeira se tanto a quanto b forem maiores que zero.
No segundo bloco if, a condição c > 10 or d > 10 será verdadeira se pelo menos um dos valores c ou d for maior que 10.
No terceiro bloco if, a condição not e inverte o valor de e. Se e for verdadeiro, o bloco else será executado.
Os operadores lógicos são fundamentais para construir lógica condicional complexa e para controlar o fluxo de execução em programas Python.

* Quando uma expressão contém operadores de diferentes grupos, a ordem de precedência é a seguinte (da mais alta para a mais baixa):

Operadores Aritméticos
Operadores de Comparação
Operadores Lógicos
_______________________________________________________________________________________________________________________________________________________________________

- FUNÇÃO PRINT() E COMO FORMATAR A SAÍDA: Em Python, a função print() é utilizada para exibir informações na tela ou em outro dispositivo de saída, como um arquivo de texto. Ela é uma das funções mais básicas e úteis para interação com o usuário e para depuração de código.

- A sintaxe básica da função print() é simples:
print(objeto1, objeto2, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
objeto1, objeto2, ...: São os objetos que você deseja imprimir na tela. Você pode passar vários objetos separados por vírgula, e o print() os exibirá sequencialmente.

sep=' ': É o separador entre os objetos. Por padrão, é um espaço em branco, mas você pode alterá-lo para qualquer string que desejar.

end='\n': É o que será adicionado ao final da impressão. Por padrão, é uma nova linha ('\n'), o que significa que após imprimir, o cursor irá para a linha seguinte. Você pode mudar isso para qualquer outra string.

file=sys.stdout: Define para onde a saída será direcionada. Por padrão, é a saída padrão do sistema (normalmente, a tela). Você pode redirecionar a saída para um arquivo, por exemplo.

flush=False: Se for True, a saída será forçada (ou seja, será exibida imediatamente). Por padrão, é False.

Exemplos de Uso
Exemplo Simples:

print("Olá, mundo!")
Neste caso, "Olá, mundo!" será impresso na tela seguido de uma nova linha.

Impressão de Vários Objetos:

nome = "Alice"
idade = 30
print("Nome:", nome, "Idade:", idade)
Aqui, nome e idade são variáveis que são impressas junto com strings adicionais.

Alterando o Separador e o Final:

print("Python", "é", "divertido", sep="-", end="!\n")
Esta linha irá imprimir "Python-é-divertido!" na tela, utilizando "-" como separador entre as palavras e exclamação (!) como o caractere final.

Formatação da Saída
Além da função print(), você pode utilizar formatação de string para controlar como os valores são exibidos. A partir do Python 3.6, é recomendado utilizar f-strings para formatação de string, devido à sua clareza e facilidade de uso.

Exemplo de f-string:

nome = "Carlos"
idade = 25
print(f"Meu nome é {nome} e eu tenho {idade} anos.")
Neste caso, {nome} e {idade} são substituídos pelos valores das variáveis nome e idade.

Outros Métodos de Formatação:
Você também pode usar métodos como .format() para formatar strings:

nome = "Ana"
idade = 22
print("Meu nome é {} e eu tenho {} anos.".format(nome, idade))
Conclusão
A função print() é fundamental para exibir informações durante a execução de programas em Python. Através dela, você pode controlar o que é exibido na tela, formatando a saída conforme necessário para tornar suas mensagens mais claras e informativas.
_______________________________________________________________________________________________________________________________________________________________________

- ESTRUTURAS DE REPETIÇÃO: Em Python, existem duas principais estruturas de repetição: o loop for e o loop while. Essas estruturas são fundamentais para executar blocos de código repetidamente com base em certas condições ou iterações. Vamos explorar cada uma delas em detalhes:

1. Loop for
O loop for é usado quando você sabe exatamente quantas vezes deseja repetir um bloco de código, geralmente com base em uma sequência (como uma lista, tupla, dicionário, string, etc.).

Sintaxe:
for item in sequencia:
    # Bloco de código a ser repetido
    # Use 'item' para acessar o elemento atual da sequência
item: Variável que recebe cada elemento da sequência a cada iteração.
sequencia: É a sequência de elementos sobre a qual o loop for vai iterar.
Exemplo:
nomes = ["Ana", "Carlos", "Maria"]

for nome in nomes:
    print(f"Olá, {nome}!")
Neste exemplo, o loop for itera sobre a lista nomes e imprime uma saudação para cada nome na lista.

2. Loop while
O loop while é usado quando você quer repetir um bloco de código enquanto uma condição específica for verdadeira. Ele continua repetindo até que a condição não seja mais atendida.

Sintaxe:
while condição:
    # Bloco de código a ser repetido enquanto a condição for verdadeira
condição: É a expressão booleana que determina se o loop deve continuar ou não.
Exemplo:
contador = 0

while contador < 5:
    print(f"Contagem: {contador}")
    contador += 1

Neste exemplo, o loop while imprime a contagem de 0 a 4, porque o bloco de código é repetido enquanto contador < 5.

Controle de Loop
Ambos os loops for e while podem ser controlados com as seguintes instruções:

break: Termina o loop imediatamente, mesmo que a condição do loop while ainda seja verdadeira ou que ainda haja itens na sequência do loop for.

continue: Pula o restante do código dentro do loop atual e passa para a próxima iteração do loop.

Exemplo com break:
for i in range(10):
    if i == 5:
        break
    print(i)
Neste exemplo, o loop for é interrompido quando i é igual a 5, usando break.

Exemplo com continue:
for i in range(10):
    if i % 2 == 0:
        continue
    print(i)
Neste exemplo, continue é usado para pular a impressão de números pares (i % 2 == 0), e apenas números ímpares são impressos.

Iteração com Índices
Às vezes, você pode precisar iterar não apenas sobre os elementos de uma sequência, mas também sobre seus índices. Para isso, você pode usar a função enumerate().

Exemplo:
nomes = ["Ana", "Carlos", "Maria"]

for indice, nome in enumerate(nomes):
    print(f"Índice {indice}: {nome}")
Neste exemplo, enumerate(nomes) retorna tuplas onde o primeiro elemento é o índice e o segundo é o nome correspondente na lista nomes.

Conclusão
As estruturas de repetição em Python (for e while) são poderosas e flexíveis, permitindo automatizar tarefas repetitivas de maneira eficiente. A escolha entre usar for ou while depende da situação específica: for quando você sabe o número de iterações antecipadamente ou precisa iterar sobre uma sequência, e while quando você precisa iterar baseado em uma condição booleana. Dominar essas estruturas é essencial para escrever código Python eficiente e conciso.



